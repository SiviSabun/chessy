import pygame as p
import random
import sys
import chessEngine  # chessEngine modÃ¼lÃ¼nÃ¼ doÄŸru bir ÅŸekilde iÃ§e aktardÄ±k

# Oyun AyarlarÄ±
p.init()

# Ekran Ã§Ã¶zÃ¼nÃ¼rlÃ¼ÄŸÃ¼nÃ¼ otomatik algÄ±la
screen_info = p.display.Info()
SCREEN_WIDTH = screen_info.current_w
SCREEN_HEIGHT = screen_info.current_h

# EkranÄ±n %95'ini kaplayacak ÅŸekilde tahtayÄ± ayarla
BOARD_WIDTH = int(SCREEN_WIDTH * 0.95)
BOARD_HEIGHT = int(SCREEN_HEIGHT * 0.95)

# EÄŸer tahtayÄ± kare olarak tutmak isterseniz
BOARD_WIDTH = min(BOARD_WIDTH, BOARD_HEIGHT)
BOARD_HEIGHT = BOARD_WIDTH

MOVE_LOG_PANEL_WIDTH = int(BOARD_WIDTH * 0.25)
MOVE_LOG_PANEL_HEIGHT = BOARD_HEIGHT
DIMENSION = 8  # SatranÃ§ tahtasÄ± 8x8'dir
SQUARE_SIZE = BOARD_WIDTH // DIMENSION
MAX_FPS = 120

# EkranÄ± oluÅŸtur
screen = p.display.set_mode((BOARD_WIDTH + MOVE_LOG_PANEL_WIDTH, BOARD_HEIGHT), p.RESIZABLE)
p.display.set_caption('CHESSY')
clock = p.time.Clock()

# Renkler ve Offsetler
LIGHT_COLOR = (255, 102, 242)
DARK_COLOR = (123, 6, 158)
BACKGROUND_COLOR = (0, 0, 0)
X_OFFSET = 0
Y_OFFSET = 0

IMAGES = {}

# YÄ±ldÄ±z animasyonu iÃ§in liste
stars = []

# ðŸ”¥ MenÃ¼nÃ¼n arka plan fotoÄŸrafÄ±
BACKGROUND_IMAGE = p.image.load("images/backgroundphoto.png")
BACKGROUND_IMAGE = p.transform.scale(BACKGROUND_IMAGE, (BOARD_WIDTH + MOVE_LOG_PANEL_WIDTH, BOARD_HEIGHT))


# GÃ¶rÃ¼ntÃ¼leri yÃ¼kle
def loadImages():
    pieces = ['wp', 'wR', 'wN', 'wB', 'wK', 'wQ', 'bp', 'bR', 'bN', 'bB', 'bK', 'bQ']
    for piece in pieces:
        IMAGES[piece] = p.transform.scale(p.image.load("images/" + piece + ".png"), (SQUARE_SIZE, SQUARE_SIZE))


# YÄ±ldÄ±zlarÄ± oluÅŸturur
def generateStars(x, y, count=30):
    print(f"Stars are generating... x:{x}, y:{y}")
    for _ in range(count):
        stars.append({
            'x': x,
            'y': y,
            'dx': random.uniform(-3, 3),
            'dy': random.uniform(-3, 3),
            'size': random.randint(2, 5),
            'life': random.randint(40, 100)
        })


# YÄ±ldÄ±zlarÄ± Ã§izer ve hareket ettirir
def drawStars():
    for star in stars:
        p.draw.circle(screen, (255, 255, 0), (int(star['x']), int(star['y'])), star['size'])
        star['x'] += star['dx']
        star['y'] += star['dy']
        star['life'] -= 1
    for star in stars[:]:
        if star['life'] <= 0:
            stars.remove(star)

# Ana menÃ¼yÃ¼ Ã§izer
def drawMenu(play_button, exit_button, hover_play=False, clicked_play=False, hover_exit=False, clicked_exit=False):
    screen.blit(BACKGROUND_IMAGE, (0, 0))

    # CHESSY BaÅŸlÄ±ÄŸÄ±
    title_font = p.font.SysFont("comicsans", 180, True)
    title_surface = title_font.render('CHESSY', True, (255, 255, 255))
    title_x = (screen.get_width() // 2) - (title_surface.get_width() // 2)
    title_y = (screen.get_height() // 6)
    screen.blit(title_surface, (title_x, title_y))

    # Sabit konumlar
    play_center_x = (screen.get_width() // 2)
    play_center_y = (screen.get_height() // 2)
    exit_center_y = play_center_y + 150  # Exit butonu Play butonunun altÄ±na sabit yerleÅŸtir

    # Play Butonu
    font = p.font.SysFont("comicsans", 50, True)
    play_text_surface = font.render('Play', True, (255, 255, 255))

    play_width, play_height = 200, 100
    if hover_play:
        play_width += 20
        play_height += 20
    if clicked_play:
        play_width -= 10
        play_height -= 10

    play_x = play_center_x - (play_width // 2)
    play_y = play_center_y - (play_height // 2)
    play_button = p.Rect(play_x, play_y, play_width, play_height)

    p.draw.rect(screen, (123, 6, 158), play_button)
    screen.blit(play_text_surface, (play_center_x - (play_text_surface.get_width() // 2),
                                    play_center_y - (play_text_surface.get_height() // 2)))

    # Exit Butonu
    exit_text_surface = font.render('Exit', True, (255, 255, 255))

    exit_width, exit_height = 200, 100
    if hover_exit:
        exit_width += 20
        exit_height += 20
    if clicked_exit:
        exit_width -= 10
        exit_height -= 10

    exit_x = play_center_x - (exit_width // 2)
    exit_y = exit_center_y - (exit_height // 2)
    exit_button = p.Rect(exit_x, exit_y, exit_width, exit_height)

    p.draw.rect(screen, (123, 6, 158), exit_button)
    screen.blit(exit_text_surface, (play_center_x - (exit_text_surface.get_width() // 2),
                                    exit_center_y - (exit_text_surface.get_height() // 2)))

    # The Creators BÃ¶lÃ¼mÃ¼ (Sol Tarafta)
    creators_font = p.font.SysFont("comicsans", 30, True)
    creators_title = creators_font.render("The creators of Chessy:", True, (255, 255, 255))
    screen.blit(creators_title, (20, 20))  # Sol Ã¼st kÃ¶ÅŸeye baÅŸlÄ±k yazÄ±lÄ±r

    # Ä°simler Listesi
    names = ["MÃ¼slÃ¼m Selim Aksahin", "Azra Ã–zdas", "Dilay Tarhan"]
    y_offset = 60  # BaÅŸlangÄ±Ã§ta baÅŸlÄ±ktan biraz aÅŸaÄŸÄ±
    for name in names:
        name_surface = creators_font.render(f"- {name}", True, (255, 255, 255))
        screen.blit(name_surface, (40, y_offset))  # Ä°simleri Ã§iz
        y_offset += 40  # Her bir isim iÃ§in 40 piksel aÅŸaÄŸÄ± kaydÄ±r

    # Telif HakkÄ± YazÄ±sÄ± (En Alt Orta)
    copyright_font = p.font.SysFont("arial", 20)  # KÃ¼Ã§Ã¼k ve dÃ¼z bir font
    copyright_surface = copyright_font.render("Â© 2025 King's Gambit Team. All rights reserved.", True, (200, 200, 200))
    copyright_x = (screen.get_width() // 2) - (copyright_surface.get_width() // 2)
    copyright_y = screen.get_height() - 30  # EkranÄ±n en altÄ±ndan 30 piksel yukarÄ±da
    screen.blit(copyright_surface, (copyright_x, copyright_y))

    return play_button, exit_button

# Ana menÃ¼
def mainMenu():
    global screen, BACKGROUND_IMAGE  # ArkaplanÄ± gÃ¼ncellemek iÃ§in global tanÄ±mlama
    running = True
    play_button = None
    exit_button = None
    clicked_play = False
    clicked_exit = False

    while running:
        mouse_pos = p.mouse.get_pos()
        mouse_click = False

        for event in p.event.get():
            if event.type == p.QUIT:
                p.quit()
                sys.exit()
            elif event.type == p.VIDEORESIZE:  # Ekran boyutu deÄŸiÅŸtirildiÄŸinde
                screen = p.display.set_mode((event.w, event.h), p.RESIZABLE)
                BACKGROUND_IMAGE = p.transform.scale(p.image.load("images/backgroundphoto.png"), (event.w, event.h))
            elif event.type == p.MOUSEBUTTONDOWN:
                mouse_click = True

        # Buton Ã§izimi ve animasyon kontrolÃ¼
        hover_play = play_button and play_button.collidepoint(mouse_pos)
        clicked_play = hover_play and mouse_click

        hover_exit = exit_button and exit_button.collidepoint(mouse_pos)
        clicked_exit = hover_exit and mouse_click

        # ArkaplanÄ± yeniden Ã§iz
        screen.blit(BACKGROUND_IMAGE, (0, 0))

        # ButonlarÄ± Ã§iz
        play_button, exit_button = drawMenu(play_button, exit_button, hover_play, clicked_play, hover_exit,
                                            clicked_exit)

        drawStars()  # YÄ±ldÄ±zlarÄ± ekrana Ã§iz
        p.display.flip()
        clock.tick(60)

        # Play Butonuna TÄ±klandÄ±ysa
        if clicked_play:
            generateStars(play_button.centerx, play_button.centery)
            start_time = p.time.get_ticks()
            while p.time.get_ticks() - start_time < 1000:  # YÄ±ldÄ±z animasyonu 1 saniye
                screen.blit(BACKGROUND_IMAGE, (0, 0))  # Arka planÄ± Ã§iz
                drawMenu(play_button, exit_button, hover_play, clicked_play, hover_exit, clicked_exit)
                drawStars()
                p.display.flip()
                clock.tick(60)

            # Loading ekranÄ±
            screen.fill((0, 0, 0))
            loading_font = p.font.SysFont("comicsans", 60, True)
            loading_surface = loading_font.render("Loading...", True, (255, 255, 255))
            screen.blit(loading_surface, ((screen.get_width() // 2) - (loading_surface.get_width() // 2),
                                          (screen.get_height() // 2) - (loading_surface.get_height() // 2)))
            p.display.flip()
            p.time.wait(1000)  # Loading ekranÄ±nda 1 saniye bekle

            main()  # Ana oyunu baÅŸlat

        # Exit Butonuna TÄ±klandÄ±ysa
        if clicked_exit:
            generateStars(exit_button.centerx, exit_button.centery)
            start_time = p.time.get_ticks()
            while p.time.get_ticks() - start_time < 1000:  # YÄ±ldÄ±z animasyonu 1 saniye
                screen.blit(BACKGROUND_IMAGE, (0, 0))  # Arka planÄ± Ã§iz
                drawMenu(play_button, exit_button, hover_play, clicked_play, hover_exit, clicked_exit)
                drawStars()
                p.display.flip()
                clock.tick(60)
            p.quit()
            sys.exit()


def main():
    """SatranÃ§ oyununun ana dÃ¶ngÃ¼sÃ¼."""
    global screen, BOARD_WIDTH, BOARD_HEIGHT, SQUARE_SIZE  # Global deÄŸiÅŸkenler
    p.init()
    loadImages()

    # BaÅŸlangÄ±Ã§ ekran ayarlarÄ±
    screen = p.display.set_mode((BOARD_WIDTH + MOVE_LOG_PANEL_WIDTH, BOARD_HEIGHT), p.RESIZABLE)
    p.display.set_caption('CHESSY')  # Pencere baÅŸlÄ±ÄŸÄ±

    running = True
    game_state = chessEngine.GameState()
    valid_moves = game_state.getValidMoves()
    move_made = False
    square_selected = ()
    player_clicks = []
    game_over = False
    return_button = None  # Return to Menu butonunu baÅŸlat

    while running:
        for event in p.event.get():
            if event.type == p.QUIT:
                p.quit()
                sys.exit()
            elif event.type == p.VIDEORESIZE:  # Pencere boyutu deÄŸiÅŸtirildiÄŸinde
                new_width = event.w - MOVE_LOG_PANEL_WIDTH
                new_height = event.h
                BOARD_WIDTH = BOARD_HEIGHT = min(new_width, new_height)
                SQUARE_SIZE = BOARD_WIDTH // DIMENSION
                screen = p.display.set_mode((BOARD_WIDTH + MOVE_LOG_PANEL_WIDTH, BOARD_HEIGHT), p.RESIZABLE)
                loadImages()
            elif event.type == p.MOUSEBUTTONDOWN:  # TaÅŸ hareketlerini iÅŸleme
                mouse_pos = p.mouse.get_pos()

                # EÄŸer Return to Menu butonuna tÄ±klanÄ±rsa
                if return_button and return_button.collidepoint(mouse_pos):
                    return  # Ana menÃ¼ye dÃ¶nmek iÃ§in dÃ¶ngÃ¼yÃ¼ sonlandÄ±r

                # KullanÄ±cÄ±nÄ±n tÄ±kladÄ±ÄŸÄ± satÄ±r ve sÃ¼tunu al
                col = mouse_pos[0] // SQUARE_SIZE
                row = mouse_pos[1] // SQUARE_SIZE

                if 0 <= row < DIMENSION and 0 <= col < DIMENSION:
                    if square_selected == (row, col):
                        square_selected = ()
                        player_clicks = []
                    else:
                        square_selected = (row, col)
                        player_clicks.append(square_selected)

                    if len(player_clicks) == 2:
                        move = chessEngine.Move(player_clicks[0], player_clicks[1], game_state.board)
                        for i in range(len(valid_moves)):
                            if move == valid_moves[i]:
                                animateMove(move, game_state, screen, clock)
                                game_state.board[move.start_row][move.start_col] = "--"
                                if move.piece_captured != "--":
                                    celebratePiece(move.piece_moved, move.end_row, move.end_col, screen, clock, game_state)
                                game_state.makeMove(valid_moves[i])
                                if move.getMoveSummary() not in game_state.move_log:
                                    game_state.move_log.append(move.getMoveSummary())
                                move_made = True
                                square_selected = ()
                                player_clicks = []
                                break
                        if not move_made:
                            player_clicks = [square_selected]

        if move_made:
            valid_moves = game_state.getValidMoves()
            move_made = False

        drawGameState(screen, game_state, square_selected)
        return_button = drawMoveLog(screen, game_state.move_log)  # Hamle logunu ve butonu Ã§iz
        p.display.flip()
        clock.tick(MAX_FPS)

def drawValidMoves(screen, moves):
    """TaÅŸÄ±n geÃ§erli hamlelerini ekrana Ã§izen fonksiyon."""
    for move in moves:
        row, col = move.end_row, move.end_col

        if move.piece_captured != "--":
            color = (255, 186, 0)  # TaÅŸ yenebiliyorsa bu renk
        else:
            color = (110, 203, 245)  # Koyumsu cyan renk

        # Yeni bir yÃ¼zey (Surface) oluÅŸtur
        highlight_surface = p.Surface((SQUARE_SIZE, SQUARE_SIZE))  # Her kare iÃ§in ayrÄ± bir yÃ¼zey
        highlight_surface.set_alpha(150)  # ÅžeffaflÄ±k: 0 (tam ÅŸeffaf) - 255 (tam opak)
        highlight_surface.fill(color)  # Renk ayarÄ± (ya sarÄ± ya da mor)

        # YÃ¼zeyi tahtanÄ±n doÄŸru konumuna Ã§iz
        screen.blit(highlight_surface, (col * SQUARE_SIZE, row * SQUARE_SIZE))

def drawGameState(screen, game_state, square_selected):
    """Tahta ve taÅŸlarÄ± Ã§izen fonksiyon."""
    drawBoard(screen)  # TahtayÄ± Ã§iz
    drawPieces(screen, game_state.board)  # TaÅŸlarÄ± Ã§iz

    if square_selected != ():  # EÄŸer bir taÅŸ seÃ§ildiyse
        row, col = square_selected
        if game_state.board[row][col] != "--":  # SeÃ§ilen kare boÅŸ deÄŸilse (taÅŸ varsa)
            piece_color = game_state.board[row][col][0]
            if (piece_color == 'w' and game_state.white_to_move) or (piece_color == 'b' and not game_state.white_to_move):
                valid_moves = [move for move in game_state.getValidMoves() if move.start_row == row and move.start_col == col]
                drawValidMoves(screen, valid_moves)  # GeÃ§erli hamleleri sarÄ±ya renklendir

def drawBoard(screen):
    """TahtanÄ±n arkaplanÄ±nÄ± Ã§izen fonksiyon."""
    colors = [p.Color(255, 102, 242), p.Color(123, 6, 158)]
    for r in range(DIMENSION):
        for c in range(DIMENSION):
            color = colors[(r + c) % 2]
            p.draw.rect(screen, color, p.Rect(c * SQUARE_SIZE, r * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE))


def drawPieces(screen, board):
    """Tahtadaki taÅŸlarÄ± Ã§izen fonksiyon."""
    for r in range(DIMENSION):
        for c in range(DIMENSION):
            piece = board[r][c]
            if piece != "--":
                screen.blit(IMAGES[piece], p.Rect(c * SQUARE_SIZE, r * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE))


def animateMove(move, game_state, screen, clock):
    """TaÅŸÄ± kayarak hareket ettirir."""
    frames_per_square = 10  # Her karede kaÃ§ piksel hareket
    start_row, start_col = move.start_row, move.start_col
    end_row, end_col = move.end_row, move.end_col
    piece = move.piece_moved

    # Hareket yÃ¶nÃ¼
    d_row = end_row - start_row
    d_col = end_col - start_col

    for frame in range(frames_per_square * max(abs(d_row), abs(d_col))):
        row = start_row + d_row * (frame / (frames_per_square * max(abs(d_row), abs(d_col))))
        col = start_col + d_col * (frame / (frames_per_square * max(abs(d_row), abs(d_col))))

        # TahtayÄ± yeniden Ã§iz
        drawBoard(screen)
        drawPieces(screen, game_state.board)

        # Eski kareyi temizleyip yeni konumu gÃ¶ster
        p.draw.rect(screen, DARK_COLOR if (start_row + start_col) % 2 else LIGHT_COLOR,
                    p.Rect(start_col * SQUARE_SIZE, start_row * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE))

        # TaÅŸÄ± gÃ¼ncel konumuna kaydÄ±rarak Ã§iz
        screen.blit(IMAGES[piece], p.Rect(col * SQUARE_SIZE, row * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE))

        p.display.flip()
        clock.tick(60)  # 60 FPS

    # Hareket bittiÄŸinde taÅŸÄ±n nihai konumunu gÃ¼ncelle
    game_state.board[start_row][start_col] = piece  # Eski konuma taÅŸÄ± geri koy (gerekli deÄŸil ama gÃ¼venlik amaÃ§lÄ±)

def drawShiningEffect(screen, x, y, frame):
    """TaÅŸÄ±n etrafÄ±nda parlayan bir bÃ¼yÃ¼k halka ve yÄ±ldÄ±zlar oluÅŸturur."""
    max_radius = 80  # HalkanÄ±n maksimum yarÄ±Ã§apÄ± (Ã¶nceden 40 idi)
    transparency = max(0, 255 - frame * 6)  # ÅžeffaflÄ±k her karede azalt
    color = (255, 255, 0)  # Parlak sarÄ±

    # Halka oluÅŸturma (Saydam yÃ¼zey kullanÄ±yoruz)
    radius = int(max_radius * (frame / 30))  # Halka bÃ¼yÃ¼r (30 karede tam bÃ¼yÃ¼klÃ¼ÄŸe ulaÅŸÄ±r)
    if radius > 0:
        halo_surface = p.Surface((radius * 2, radius * 2), p.SRCALPHA)  # Saydam yÃ¼zey
        p.draw.circle(halo_surface, (color[0], color[1], color[2], transparency), (radius, radius), radius, width=8)
        # Halka, taÅŸÄ±n merkezine yerleÅŸtirilir
        screen.blit(halo_surface, (x - radius + SQUARE_SIZE // 2, y - radius + SQUARE_SIZE // 2))

    # YÄ±ldÄ±z efektleri
    for i in range(10):  # 10 adet yÄ±ldÄ±z (Ã¶nceden 5 idi)
        star_x = x + random.randint(-40, 40)  # YÄ±ldÄ±zlar daha geniÅŸ alana yayÄ±lÄ±yor
        star_y = y + random.randint(-40, 40)
        star_size = random.randint(3, 6)  # YÄ±ldÄ±z boyutunu bÃ¼yÃ¼ttÃ¼k
        p.draw.circle(screen, (255, 255, 0, transparency), (star_x, star_y), star_size)

def celebratePiece(piece, row, col, screen, clock, game_state):
    """TaÅŸ yediÄŸinde sevinme efekti uygular (parlayan bÃ¼yÃ¼k halka ve yÄ±ldÄ±zlar)."""
    frames = 45  # Toplam animasyon sÃ¼resi (30'dan 45'e Ã§Ä±karÄ±ldÄ±)
    x = X_OFFSET + col * SQUARE_SIZE
    y = Y_OFFSET + row * SQUARE_SIZE

    for frame in range(frames):
        drawBoard(screen)
        drawPieces(screen, game_state.board)  # Oyun tahtasÄ±nÄ± ve taÅŸlarÄ± Ã§iziyoruz

        # TaÅŸÄ±n Ã¼zerine Ã§izilecek parlaklÄ±k ve yÄ±ldÄ±z efekti
        drawShiningEffect(screen, x, y, frame)

        # TaÅŸÄ± Ã§iz (Bu kÄ±sÄ±mda taÅŸ ekranda kalÄ±r)
        screen.blit(IMAGES[piece], p.Rect(x, y, SQUARE_SIZE, SQUARE_SIZE))

        p.display.flip()
        clock.tick(60)  # 60 FPS animasyon

def drawMoveLog(screen, move_log):
    """SaÄŸdaki siyah panelde hamle logunu dÃ¼zgÃ¼n ÅŸekilde yazdÄ±rÄ±r ve 'Return to Menu' butonunu Ã§izer."""
    move_log_rect = p.Rect(BOARD_WIDTH, 0, MOVE_LOG_PANEL_WIDTH, MOVE_LOG_PANEL_HEIGHT)
    p.draw.rect(screen, (0, 0, 0), move_log_rect)  # Siyah paneli Ã§iz

    # "Return to Menu" Butonu
    button_font = p.font.SysFont("comicsans", 20, True)
    original_button_width, original_button_height = 200, 100
    button_width, button_height = original_button_width, original_button_height  # VarsayÄ±lan boyut
    button_x = move_log_rect.x + (MOVE_LOG_PANEL_WIDTH // 2) - (button_width // 2)
    button_y = 10  # Panelin Ã¼st kÄ±smÄ±na yerleÅŸtirme

    mouse_pos = p.mouse.get_pos()
    mouse_click = p.mouse.get_pressed()[0]  # Sol tÄ±klama kontrolÃ¼

    # Buton hover ve click efektleri
    hover = p.Rect(button_x, button_y, button_width, button_height).collidepoint(mouse_pos)
    clicked = hover and mouse_click

    if hover:
        button_width = original_button_width - 10  # Boyutu kÃ¼cÃ¼lt
        button_height = original_button_height - 10  # Boyutu kÃ¼cÃ¼lt
    if clicked:
        button_width = original_button_width   # Boyutu normal
        button_height = original_button_height   # Boyutu normal

    # Sabit merkezi korumak iÃ§in X ve Y konumlarÄ±nÄ± buna gÃ¶re ayarla
    centered_x = button_x + (original_button_width // 2) - (button_width // 2)
    centered_y = button_y + (original_button_height // 2) - (button_height // 2)

    return_button = p.Rect(centered_x, centered_y, button_width, button_height)
    p.draw.rect(screen, (123, 6, 158), return_button)  # Mor renkli buton
    text_surface = button_font.render("Return to Menu", True, (255, 255, 0))  # SarÄ± metin
    screen.blit(text_surface, (centered_x + (button_width // 2) - (text_surface.get_width() // 2),
                               centered_y + (button_height // 2) - (text_surface.get_height() // 2)))

    font = p.font.SysFont("comicsans", 10)  # Daha kÃ¼Ã§Ã¼k bir font
    padding = 5  # Her hamle arasÄ±ndaki boÅŸluk
    text_y = centered_y + button_height + 10  # Butonun hemen altÄ±na hamlelerin baÅŸlamasÄ± iÃ§in boÅŸluk

    max_text_height = move_log_rect.height - text_y - padding  # Panelin yazÄ± alanÄ± yÃ¼ksekliÄŸi
    line_height = font.get_height() + padding  # Her bir hamlenin yÃ¼ksekliÄŸi
    max_lines = max_text_height // line_height  # Panelin iÃ§ine sÄ±ÄŸabilecek maksimum hamle sayÄ±sÄ±

    # Son sÄ±ÄŸabilecek hamleleri gÃ¶ster
    recent_moves = move_log[-max_lines:]

    for i, move in enumerate(recent_moves):  # Son hamleleri gÃ¶ster
        text_surface = font.render(move, True, (255, 255, 0))  # SarÄ± renk
        text_x = move_log_rect.centerx - text_surface.get_width() // 2  # Yatayda ortala
        screen.blit(text_surface, (text_x, text_y + i * (font.get_height() + padding)))

    return return_button  # Return to Menu butonunu dÃ¶ndÃ¼r

if __name__ == "__main__":
    mainMenu()
    main()
